// Autogenerated from Pigeon (v0.1.23), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString*, id>* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface FBResultInfo ()
+(FBResultInfo*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FBCallInfo ()
+(FBCallInfo*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation FBResultInfo
+(FBResultInfo*)fromMap:(NSDictionary*)dict {
  FBResultInfo* result = [[FBResultInfo alloc] init];
  result.result = dict[@"result"];
  if ((NSNull *)result.result == [NSNull null]) {
    result.result = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.result ? self.result : [NSNull null]), @"result", nil];
}
@end

@implementation FBCallInfo
+(FBCallInfo*)fromMap:(NSDictionary*)dict {
  FBCallInfo* result = [[FBCallInfo alloc] init];
  result.methodName = dict[@"methodName"];
  if ((NSNull *)result.methodName == [NSNull null]) {
    result.methodName = nil;
  }
  result.params = dict[@"params"];
  if ((NSNull *)result.params == [NSNull null]) {
    result.params = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.methodName ? self.methodName : [NSNull null]), @"methodName", (self.params ? self.params : [NSNull null]), @"params", nil];
}
@end

@interface FBFlutterRouterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger>* binaryMessenger;
@end

@implementation FBFlutterRouterApi
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger>*)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)callFlutter:(FBCallInfo*)input completion:(void(^)(FBResultInfo*, NSError* _Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterRouterApi.callFlutter"
      binaryMessenger:self.binaryMessenger];
  NSDictionary* inputMap = [input toMap];
  [channel sendMessage:inputMap reply:^(id reply) {
    NSDictionary* outputMap = reply;
    FBResultInfo * output = [FBResultInfo fromMap:outputMap];
    completion(output, nil);
  }];
}
@end
void FBNativeRouterApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FBNativeRouterApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NativeRouterApi.callNative"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FBCallInfo *input = [FBCallInfo fromMap:message];
        FlutterError *error;
        FBResultInfo *output = [api callNative:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
